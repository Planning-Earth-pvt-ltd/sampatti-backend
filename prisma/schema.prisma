datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PropertyCategory {
  Residential
  Commercial
  Industrial
  Land
}

enum PropertyStatus {
  Listed
  Active
  Sold
  Funded
}

enum TransactionType {
  BUYED
  SELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id            String         @id @default(cuid()) @map("userId")
  fullName      String
  phoneNumber   String         @unique
  email         String?        @unique
  isKycVerified Boolean        @default(false)
  createdBy     String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  kycStatus     KYCStatus      @default(PENDING)

  Token         Token[]
  Cart          Cart[]
  Transaction   Transaction[]

  @@map("users")
}

model Token {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_tokens")
}

model OwnerUser {
  id          String     @id @default(cuid())
  name        String
  phoneNumber String     @unique
  address     String

  properties  Property[]
}

model Property {
  id               String           @id @default(cuid())
  title            String
  description      String
  address          String
  city             String
  state            String
  propertyCategory PropertyCategory
  propertyType     String
  propertySubType  String?
  images           String[]
  totalAreaSqft    Float
  TotalTokens      Int
  currentValuation Float
  PricePerSqFt     Float
  SqFtAreaPerToken Float
  PricePerToken    Float
  status           PropertyStatus
  ownerUserId      String

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  ownerUser        OwnerUser        @relation(fields: [ownerUserId], references: [id])
  Cart             Cart[]
  Transaction      Transaction[]
}

model Cart {
  id           String   @id @default(cuid())
  userId       String
  propertyId   String
  tokenPrice   Decimal
  quantity     Int
  amount       Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
  property     Property @relation(fields: [propertyId], references: [id])
}

model Transaction {
  id           String            @id @default(cuid()) @map("transactionId")
  userId       String
  propertyId   String
  tokenPrice   Decimal
  quantity     Int
  amount       Decimal
  type         TransactionType
  status       TransactionStatus
  createdAt    DateTime          @default(now())

  user         User              @relation(fields: [userId], references: [id])
  property     Property          @relation(fields: [propertyId], references: [id])
}